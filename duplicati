#!/bin/bash
source /opt/duplicati_helper/duplicati.conf

####
# This file is intended to give a more natural interface to the duplicati command
# line interface, simplifying automated backups.
####

main () { 
    if [ "$1" = "command" ] ; then
        ## Run duplicati with the provided arguments
            shift
            ${DUPLICATI} $@
            exit_duplicati $? "command"
    elif [ "$1" = "server" ] ; then
        ## Start the Webserver
            ${DUPLICATI_SERVER} --webservice-port=${SERVER_PORT} --webservice-interface=* --webservice-password=${SERVER_PAS}
            exit_duplicati $? "server"
    elif [ "$1" = "usage" ] ; then
        ## Show usage of running duplicati processes using top
            duplicati_usage
    elif [ "$1" = "status" ] ; then
        ## Show the status, displayed 
            duplicati_status $2
    elif [ "$#" -lt 2 ] ; then 
        ## If provided arguments do not fit, show help
            help
    elif ( [ "$1" == "repair" ] || [ "$1" == "backup" ] ) ; then
        if [ "$HELPER_AUTO_UPDATE" = "true" ] ; then
            update_helper $@
        fi
        ## Backup or repair specified backup
            run_duplicati $1 $2 $3
    elif ( [ "$1" == "kill" ] ) ; then
        ## Kill running duplicati process
            kill_duplicati $2
    fi
}

# Choses the right backup config and starts it
# $1: "repair" or "backup" depending
# $2: name of backup 
# $3: 'quiet', optional
run_duplicati () {

    ############################################################################
    # Read config
    ############################################################################

    # Load the correct configuration
    while read -r name path pas LOCAL_OPTIONS ; do
        if [[ $name == \#* ]] ; then
            # Ignore lines with pound
            continue
        elif [ $2 = $name ] ; then
            # If this is the choosen backup, start backup
            break
        else
            # Clear name, in case it did not match
            name=""
        fi
    done < "${BACKUP_CONFIG}"
    
    # If no config was found, exit
    if [ -z "$name" ] ; then
        echo "No backup config with name $2 found!"
        echo
        help
    fi
    
    ############################################################################
    # Check if job is already running 
    ############################################################################

    # Build PID file path for this job
    THIS_DUPLICATI_PID="${PID_DIR}${DUPLICATI_PID_PREFIX}.${name}.pid"

    if [ -e ${THIS_DUPLICATI_PID} ] ; then
        if ps -p $(cat $THIS_DUPLICATI_PID) > /dev/null ; then
            ## If duplicati is currently performing a backup you can't start another one
            echo "Duplicati already running"
            exit_duplicati 5 $1 ${name}
        else
            ## If there is a PID file, but no running process delete the pid file
            rm $THIS_DUPLICATI_PID
        fi
    fi

    ############################################################################
    # Build duplicati base command 
    ############################################################################

    # 1) Remote directory
    DUPLICATI_CMD="${BASE_URL}/${name}"
    
    # 2) Repair or backup
    if [ "$1" = "repair" ] ; then
        DUPLICATI_CMD="repair ${DUPLICATI_CMD}"
    elif [ "$1" = "backup" ] ; then
        DUPLICATI_CMD="backup ${DUPLICATI_CMD} ${path}"
    else
        help
    fi

    # 3) Backup config from backup.conf
    DUPLICATI_CMD+=" --backup-name=\"${name}\" --prefix=\"${name}\" --passphrase=\"${pas}\""

    # 4) Authentication at backend 
    DUPLICATI_CMD+=" --authid=\"${AUTH_ID}\""

    # 5) Set log settings
    THIS_LOG_PATH="${LOG_PATH}${LOG_PREFIX}.${name}.log"
    THIS_CLI_LOG_PATH="${LOG_PATH}${LOG_PREFIX}.${name}.cli.log"
    DUPLICATI_CMD+=" --log-file=\"${THIS_LOG_PATH}\"" 

    ############################################################################
    # Build duplicati options based on duplicati.conf and backup.conf 
    ############################################################################

    # This variable will hold the final options added to the call
    FINAL_OPTIONS=""

    # These are the global options from duplicati.conf
    GLOBAL_OPTIONS="--log-level=\"${LOG_LEVEL}\" ${COMPRESSION_MODULE} ${ENCRYPTION_MODULE} ${BACKUP_MODULE}" 

    # 1) LOCAL_OPTIONS (read from backup.conf) need to be scanned, correct options need to be included, exclude paths need to be surounded by --exclude="". Everything will be put into FINAL_OPTIONS
    for OPTION in $LOCAL_OPTIONS ; do
        if [[ $OPTION == \"* ]] ; then          # In case the option starts with a double quote, this means it is an exclude path (therefore add --exclude)
            FINAL_OPTIONS+="--exclude=$OPTION "
        else                                    # Otherwise, just add it to the variable
            FINAL_OPTIONS+="$OPTION "
        fi
    done

    # 2) Every global option needs to be merged into seperate variables (TEMP_OPTION) and then we need to check, if this option is already part of FINAL_OPTIONS. If not add it, otherwise drop it
    TEMP_OPTION=""
    for OPTION in $GLOBAL_OPTIONS ; do
        if [[ $OPTION == "--"* ]] ; then        # If the option starts with '--' we start a new token
            TEMP_OPTION="$OPTION"
        elif [ ! -z "$TEMP_OPTION" ] ; then     # Else, there must been an earlier entry, otherwise there is something wrong
            TEMP_OPTION+=" $OPTION"
        else                                    # Something is wrong
            echo "Unexpected token in global 'duplicati.conf': $OPTION"
            exit_duplicati 3 "$1" "${name}"
        fi

        if [[ $TEMP_OPTION != *"\"" ]] ; then   # If the current token does not finish with a double quote, we need to add more content
            continue
        fi

        # Since we completely read the current option we now need to check if the key already exists
        if [ ! -z "$TEMP_OPTION" ] ; then
            # Extract the key from the current option
            CURRENT_KEY=$(echo "$TEMP_OPTION" | grep -oP "\-\-.*\=")
            if [[ $FINAL_OPTIONS != *"$CURRENT_KEY"* ]] ; then # Add this option only, if the final options do not already contain the key
                FINAL_OPTIONS+=" $TEMP_OPTION"
            fi
            TEMP_OPTION=""
        fi
    done

    # Now FINAL_OPTIONS should hold the correct and proper formatted options
    
    ############################################################################
    # Run duplicati
    ############################################################################


    # Running command
    ${DUPLICATI} ${DUPLICATI_CMD} ${FINAL_OPTIONS} & echo $! > ${THIS_DUPLICATI_PID}
    
    ############################################################################
    # Make duplicati quiet/monitor log files
    ############################################################################
    
    # Workaround using gdb and swapping file descriptors
    # 1) Duplicati's "--quiet-console" does not work at the moment (see https://github.com/duplicati/duplicati/issues/1752 for status)
    # 2) Adding ">>" through shell scripts results into duplicati interpreting some parts wrong and complaining about non-existing source folders
    # Currently NOT working (theoretically should work at some point and is much cleaner, therefore I will keep it here):
    # if [ "$3" = "quiet" ] ; then
    #     DUPLICATI_ARG="${DUPLICATI_ARG} --quiet-console=true >> ${THIS_CLI_LOG_PATH} 2>&1"
    # fi
    #
    # This is a workaround function, using gdb to move the file descriptor currently pointing at stdout (or similar) to the log file
    fdswap $(cat ${THIS_DUPLICATI_PID}) ${THIS_CLI_LOG_PATH}

    # This function will detach and monitor the changes made to the CLI log in order to give a rich status summary (eg. used by duplicati status, duplicatirc)
    # In case the quiet flag is NOT set, this function will provide the output of the log file to the console
    monitor_log ${THIS_CLI_LOG_PATH} $(cat ${THIS_DUPLICATI_PID}) ${name} $3 &
    
    ############################################################################
    # Wait for duplicati to finish, then clean and exit
    ############################################################################
    wait $(cat ${THIS_DUPLICATI_PID}) 
    success=$?
    rm ${THIS_DUPLICATI_PID}

    exit_duplicati $success $1 ${name}
}

# Kills a running instance of duplicati
# $1: Name of the backup instance
kill_duplicati () {
    THIS_DUPLICATI_PID="${PID_DIR}${DUPLICATI_PID_PREFIX}.$1.pid"

    if [ -e ${THIS_DUPLICATI_PID} ] && ps -p $(cat ${THIS_DUPLICATI_PID}) > /dev/null ; then
        sudo kill -9 $(cat ${THIS_DUPLICATI_PID})
        sleep 1
        
        if [ -e ${THIS_DUPLICATI_PID} ] ; then
            rm -f ${THIS_DUPLICATI_PID}
        fi

        exit_duplicati 4 "job" $1
    else
        # Duplicati is not running, can't kill it
            echo "Duplicati not running"
            exit_duplicati 3 "kill" $1
    fi
}

# Shows the usage of all running duplicati jobs using top
duplicati_usage () {
    DUPLICATI_PIDS="${PID_DIR}${DUPLICATI_PID_PREFIX}.*"

    if ls ${DUPLICATI_PIDS} 1> /dev/null 2>&1; then
        TOP_CMD="top -c "

        for f in ${DUPLICATI_PIDS} ; do
            TOP_CMD="${TOP_CMD} -p $(cat $f)"
        done

        ${TOP_CMD}
    else
        echo "No instance of duplicati is running" 
    fi
    
    exit_duplicati 1 "usage"
}

# If invoked without any arguments, showing the status summary as provided by duplicatirc.
# If a single argument is provided, the current log output of this job is shown using tail.
duplicati_status () {
    if [ -z "$1" ] ; then
        source $DUPLICATIRC
    else
       tail -f ${LOG_PATH}${LOG_PREFIX}.$1.*  
    fi
    exit_duplicati 1 "status"
}

# This function checks if there is an update available for the helper and installs the update
# Arguments: The arguments of the initial run 
update_helper () {
    # Check for interactive shell
    STDIN="$(readlink -f /proc/31489/fd/0)"
    if [[ $STDIN == *"/dev/null"* ]] || [[ $STDIN == *"(deleted)"* ]] ; then
        echo "No user interaction, postponing update"
        return
    fi

    CURRENT_DIR=$(pwd)
    GIT_DIR=$(dirname $(readlink -f $0))

    cd $GIT_DIR

    echo -n "Checking for duplicati_helper updates..." 
    git remote update > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        LOCAL=$(git rev-parse @{0})
        REMOTE=$(git rev-parse @{u})

        if [ $LOCAL != $REMOTE ]; then
            echo "updates available!"
            echo "Changelog:" 
            git --no-pager log $LOCAL..$REMOTE --pretty=format:'    %ci: %s %cr <by %cn>' --abbrev-commit
            while true ; do
                read -p "Do you want to update the helper now? (Make sure you change settings files as advised in changelog) [y/n]" yn
                case $yn in
                    [Yy]* )
                        echo -n "Updating..."
                        git pull > /dev/null 2> /dev/null
                        cd $CURRENT_DIR
                        echo "done, restarting helper now!"
                        exec $0 $@
                        exit ;;
                    [Nn]* )
                        cd $CURRENT_DIR
                        return 1 ;;
                    * )
                        echo "Please answer yes or no.";;
                esac
            done
            exit
        else
            echo "no update available"
            echo
        fi
    else
        echo "unable to get update, try again later"
        echo
    fi

    cd $CURRENT_DIR
}

help () {
    echo "Usage: "
    echo "  Backup/Repair:  $0 {repair | backup} <backup name> { quiet | }" 
    echo "      Currently configured backups:"
    
    while read -r name path pas excl ; do
        if [[ $name == \#* ]] ; then
            # Ignore lines with pound
            continue
        else
            echo "          ${name}: ${path}"
        fi
    done < "${BACKUP_CONFIG}"

    echo "      Optional parameter 'quiet' will relay all output to ${DUPLICATI_LOG}"
    echo "  Kill:           $0 kill <backup name>"
    echo "      Kills the specified backup job"
    echo "  Server:         $0 server"
    echo "      The duplicati webinterface is started on port ${SERVER_PORT} with password '${SERVER_PAS}'"
    echo "  Usage:          $0 usage"
    echo "      Shows the usage of all running duplicati jobs using top"
    echo "  Status:         $0 status"
    echo "      Shows the status table, shown during log in"
    echo "  Job status:     $0 status <backup name>"
    echo "      Shows the live log output of the specified job, using tail"
    echo "  Duplicati:      $0 command"
    echo "      The duplicati command line interface is started with all arguments that follow 'command'"
    exit_duplicati 3 "help"
}

# Exits duplicati and writes the result to the status file
# $1 Exit code: 
#   0: Successfull
#   1: Successfull, but backup didn't change anything
#   2: Successfull, with warnings
#   3: Not successfull, wrong syntax
#   4: Not successfull, instance killed
#   5: Not successfull, another instance was allready running
# $2 Backup job function (e.g. repair, backup...)
# $3 Backup job name, optional
exit_duplicati () {
    STATUS=""
    JOB_FUNC="$2"
    JOB_NAME="$3"
    JOB_TIME="$(date +'%Y-%m-%d_%H:%M:%S')"
 
    case "$1" in
        0)
            STATUS="${JOB_FUNC} successful" ;;
        1)
            STATUS="${JOB_FUNC} successful [no files were changed]" ;;
        2)
            STATUS="${JOB_FUNC} successful [with warnings]" ;;
        3)
            STATUS="${JOB_FUNC} NOT successful [wrong syntax]" ;;
        4)
            STATUS="${JOB_FUNC} NOT successful [instance was killed]" ;;
        5)
            STATUS="${JOB_FUNC} NOT successful [instance was already running]" ;;
        100)
            STATUS="${JOB_FUNC} NOT successful [repair required]" ;;
        *)
            STATUS="${JOB_FUNC} NOT successful" ;;
    esac

    if [ -z "$JOB_NAME" ] ; then
        # Check if log is accessible
        if >> "${LOG_PATH}${LOG_PREFIX}.log" ; then
            # Write to log
            echo "${JOB_TIME}: Duplicati finished ${STATUS}" >> "${LOG_PATH}${LOG_PREFIX}.log"
        else
            echo "${JOB_TIME}: Duplicati finished ${STATUS}"
            echo "Unable to write log."
        fi
    else
        # Check if log is accessible
        if >> "${LOG_PATH}${LOG_PREFIX}.${JOB_NAME}.log" ; then
            # Write to log
            echo "${JOB_TIME}: Job \"${JOB_NAME}\" finished ${STATUS}" >> "${LOG_PATH}${LOG_PREFIX}.${JOB_NAME}.log"
        else
            echo "${JOB_TIME}: Job \"${JOB_NAME}\" finished ${STATUS}" 
            echo "Unable to write log."
        fi

        # Modify status file unless status code is 3 or 5
        if [ "$1" -ne 3 ] && [ "$1" -ne 5 ] ; then

            touch ${BACKUP_STATUS_FILE}
            chmod ugo+rw ${BACKUP_STATUS_FILE} 
    
            # 1) Delete earlier status of this job
            sed -i '/^\(+\|-\)'" ${JOB_NAME}"' /d' ${BACKUP_STATUS_FILE}
    
            # 2) Add new status
            echo "+ ${JOB_NAME} ${JOB_TIME} ${STATUS} {Code: $1}" >> ${BACKUP_STATUS_FILE}
        fi
    fi 
    
    exit $1
}

# This function exchanges file descriptors of running processes using gdb, this is a workaround, since standard relaying (using <<) does not seem to work with duplicati.
# This script is based on a script by Robert McKay and modified by Ingvar Hagelund 
# $1 The PID of the process
# $2 The log file
fdswap () {
    if ! gdb --version > /dev/null 2>&1; then 
        echo "Unable to find gdb, quiet mode not working!"
        return
    fi
   
    sudo -v
    if [ "$?" = 1 ] ; then
        echo "In order to write all output to a file you need to be root"
        return
    fi
    
    dst=$2
    pid=$1

    touch $dst
    (
        echo "attach $pid"
        # Open Mode is (O_RDWR | O_APPEND | O_ASYNC | O_CREAT)
        echo 'call open("'$dst'", 586, 0666)'
        # Switch stdout
        echo 'call dup2($1,1)'
        # Switch stderr
        echo 'call dup2($1,2)'
        # Close file
        echo 'call close($1)'
        echo 'detach' 
        echo 'quit'
    ) | sudo gdb -q -x - > /dev/null 2>&1
}

# This function monitors a log file and optionally prints out its content
# Additionally it analyzes the log file, summaryzing the current status in a status file, placed next to the pid file, with the following naming convention: status.${DUPLICATI_PID_PREFIX}.${name} A line will always be shorter than 20 characters.
# $1: The path to the log file
# $2: The PID of duplicati (in order to stop monitoring after duplicati finished
# $3: The name of the running backup job
# $4: Quiet flag (not outputting monitored content)
monitor_log() {
    STATUS_FILE=${PID_DIR}status.${DUPLICATI_PID_PREFIX}.${name}
    # Making sure status file is empty
    echo "Initiating..." > $STATUS_FILE
    
    # This variable will contain the mode, duplicati is currently in
    # Possible values are:
    #   Remote backup chk   [started by "Checking remote backup ..."]
    #   Scanning            [started by "Scanning local files ..."] 
    #   Backup verification [started by "Verifying remote backup ..."]

    MODE=""

    if [ ! -z "$1" ] && [ ! -z "$2" ]  && [ ! -z "$3" ]; then
        tail -f --pid=$2 $1 | \
        while read line ; do
            if [ -z "$4" ] ; then
                echo "$line"
            fi

            # Checking for mode change
            echo "$line" | grep -e "Checking remote backup ..." -e "Scanning local files ..." -e "Verifying remote backup ..."
            if [ $? = 0 ] ; then
                if [[ "$line" == *"Checking remote backup ..."* ]] ; then
                    MODE="Remote backup chk"
                elif [[ "$line" == *"Scanning local files ..."* ]] ; then
                    MODE="Scanning"
                elif [[ "$line" == *"Verifying remote backup ..."* ]] ; then
                    MODE="Backup verification"
                else
                    echo "Unexpexted token: $line"
                fi
                echo $MODE > $STATUS_FILE
            else                            # No mode change, but maybe updates
                if [ "$MODE" == "Scanning" ] ; then
                    
                    # The following command is the most precise, but would exceed the 20 char requirement
                    TEMP=$(echo $line | grep -oP "examined \([0-9]+\.?[0-9]* [T|G|M|K]?[B|b]")
                    if [ ! -z "$TEMP" ] ; then
                        TEMP=${TEMP:9}
                        # Getting only values before comma
                        SIZE=$(echo $TEMP | grep -oP "\([0-9]+")
                        # Removing comma
                        SIZE=${SIZE:1}
                        UNIT=$(echo $TEMP | grep -oP "[T|G|M|K]?[B|b]")
                        echo "${MODE}: ${SIZE}${UNIT} left" > $STATUS_FILE
                    fi
                fi
            fi
        done
    fi
    if [ -e $STATUS_FILE ] ; then
        rm $STATUS_FILE
    fi
}

main $@
exit -1
